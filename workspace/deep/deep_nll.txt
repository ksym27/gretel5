

[data]

name = deep-nll
workspace = workspace
dataset = deep
input_directory = deep
max_trajectory_length = 300
min_trajectory_length = 5
extract_coord_features = true

k_closest_nodes = 4

[training]

; can be SGD, RMSprop or Adam
optimizer = Adam

; can be RMSE, target_only, dot_loss, start_target_only, nll_loss
loss = nll_loss

; device can be cpu or cuda:0
device = cuda:0

lr = .001
momentum = 0.5
batch_size = 5
train_test_ratio = 0.9/0.1

; train and test only on the first trajectory (requires batch_size=1)
overfit1 = False

shuffle_samples = true
number_epoch = 200
seed = 20
patience = 8

[model]
number_observations = 4
self_loop_weight = 0.01
diffusion_k_hops = 20
diffusion_hidden_dimension = 1
parametrized_diffusion = false
use_shortest_path_distance = false
initial_edge_transformer = true

[model-updated]
self_loop_deadend_only = true
diffusion_self_loops = false

rw_max_steps = -1
rw_expected_steps = true
rw_edge_weight_see_number_step = false  ; deprecated
with_interpolation = False

; next, destination, start_to_target
target_prediction = next
latent_transformer_see_target = false
rw_non_backtracking = false
double_way_diffusion = False

[logging]

compute_baseline = false

[checkpoint]
enable_checkpointing = True
checkpoint_directory = chkpt
checkpoint_every_num_epoch = 10
restore_from_checkpoint = true


[deep]
num_observed_samples = 200
create_path_file = true
obs_time_intervals = 6
checkpoint_file_name = 0030.pt
max_iteration_prediction = 600
prediction_file_name = prediction_result.csv
agent_speed = 1.11
